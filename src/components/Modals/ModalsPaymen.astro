<dialog
  id="my_modal_3"
  class="modal fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm"
>
  <div class="modal-box relative max-w-lg mx-auto my-12 bg-white p-6">
    <!-- Close button -->
    <button
      class="absolute top-0 right-0 m-4 text-lg font-semibold"
      onclick="document.getElementById('my_modal_3').close()"
    >
      √ó
    </button>

    <!-- Form header -->
    <h3 class="font-bold text-lg mb-4">Card</h3>

    <!-- Form fields -->
    <form method="POST" id="CreditCardInfoForm">
      <div class="mb-4">
        <label
          for="name-on-card form-control w-full max-w-xs"
          class="block text-gray-700 mb-2">Name on Card</label
        >
        <input
          type="text"
          id="CardholderName"
          name="CardholderName"
          class="block px-4 py-2 border border-gray-300 rounded-md input input-bordered w-full max-w-full"
        />
      </div>

      <div class="mb-4">
        <label for="CardNumber" class="block text-gray-700 mb-2"
          >Card Number</label
        >
        <input
          type="number"
          id="CardNumber"
          name="CardNumber"
          class="block px-4 py-2 borde border-gray-300 rounded-md input input-bordered w-full max-w-full"
        />
      </div>

      <div class="grid grid-cols-2 gap-4 mb-4">
        <div>
          <label for="ExpirationMonth" class="block text-gray-700 mb-2"
            >Expiration Month</label
          >
          <select
            id="ExpirationMonth"
            name="ExpirationMonth"
            class="block px-4 py-2 border border-gray-300 rounded-md select select-bordered w-full max-w-xs"
          >
            <option disabled selected>Pick one</option>
            <option>01</option>
            <option>02</option>
            <option>03</option>
            <option>04</option>
            <option>05</option>
            <option>06</option>
            <option>07</option>
            <option>08</option>
            <option>09</option>
            <option>10</option>
            <option>11</option>
            <option>12</option>
          </select>
        </div>
        <div>
          <label for="ExpirationYear" class="block text-gray-700 mb-2"
            >Expiration Year</label
          >
          <select
            id="ExpirationYear"
            name="ExpirationYear"
            class="block px-4 py-2 border border-gray-300 rounded-md select select-bordered w-full max-w-xs"
          >
            <option disabled selected>Pick one</option>
            <option>2024</option>
            <option>2025</option>
            <option>2026</option>
            <option>2027</option>
            <option>2028</option>
            <option>2029</option>
            <option>2030</option>
            <option>2031</option>
            <option>2032</option>
            <option>2033</option>
            <option>2034</option>
            <option>2035</option>
          </select>
        </div>
      </div>

      <div class="grid grid-cols-2 gap-4 mb-4">
        <div>
          <label for="CVV" class="block text-gray-700 mb-2">CVV</label>
          <input
            type="text"
            id="CVV"
            name="CVV"
            class="block px-4 py-2 border border-gray-300 rounded-md input input-bordered w-full max-w-full"
            placeholder="Required"
          />
        </div>
        <div>
          <label for="BillingPostalCode" class="block text-gray-700 mb-2"
            >Billing Postal Code</label
          >
          <input
            type="text"
            id="BillingPostalCode"
            name="BillingPostalCode"
            class="block px-4 py-2 border border-gray-300 rounded-md input input-bordered w-full max-w-full"
            placeholder="97370"
          />
        </div>
      </div>

      <div class="mt-4">
        <p class="text-xs text-gray-500">
          By continuing, I allow Tesla to save my payment instrument information
          for future transactions pursuant to the <a
            href="#"
            class="text-blue-600 hover:underline">Payment Terms for Services</a
          >.
        </p>
      </div>

      <div class="modal-action mt-4 flex justify-start">
        <button class="btn">Close</button>
        <button
          type="submit"
          class="btn bg-blue-600 hover:bg-blue-700 text-white ml-2"
        >
          Continue
        </button>
      </div>
    </form>
  </div>
</dialog>
<script>
  window.addEventListener("DOMContentLoaded", (event) => {
    const form = document.getElementById(
      "CreditCardInfoForm",
    ) as HTMLFormElement;
    const errorMessageElement = document.getElementById("error-message");

    if (form) {
      form.addEventListener("submit", async (event) => {
        event.preventDefault();

        const formData = new FormData(form);
        const formJSON = Object.fromEntries(formData.entries());

        try {
          const response = await fetch("http://localhost:3000/api/creditcard", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(formJSON),
          });

          if (!response.ok) {
            throw new Error(
              `Contrase√±a o Correo Invalidos: ${response.status} Unauthorized`,
            );
          } else {
            const contentType = response.headers.get("content-type");
            if (contentType && contentType.indexOf("application/json") !== -1) {
              const data = await response.json();
              // Aqu√≠ puedes guardar el token JWT en localStorage o en una cookie
              localStorage.setItem("token", data.token);
            } else {
              throw new Error("Invalid content type: " + contentType);
            }
          }
          window.location.href = "/paymentmethod";
          console.log(
            "Fùôπ‚à∑·í≤‚öçÍñé·îë‚à∑‚ïéùôπ ·í∑„É™‚çä‚ïé·îë‚Ü∏ùôπ: " + JSON.stringify(formJSON, null, 2),
          );
        } catch (error) {
          console.error("·í∑„É™‚çä‚ïé·îë‚Ü∏ùôπ ocurrido un ·í∑„É™‚çä‚ïé·îë‚Ü∏ùôπ:", error);
          if (errorMessageElement) {
            errorMessageElement.textContent = (error as Error).message;
          }
        }
      });
    }
  });
</script>
